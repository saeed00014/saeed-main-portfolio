import { type CSSUtility } from '@/css-utilities';
import { Base } from '@/css-utilities/base';
import { type UnsafeCSSValue } from '@/utils/css-value';
import { type Dimension } from '@/utils/dimension';
interface NormaliseFunctionValuesOptions {
    dimension?: Dimension;
    translateX?: UnsafeCSSValue;
    translateY?: UnsafeCSSValue;
    translateZ?: UnsafeCSSValue;
}
interface TranslateDeclarations {
    translate: string;
}
export declare class Translate extends Base implements CSSUtility {
    private isProcessableValue;
    private isProcessableValues;
    private normaliseValues;
    static defaultFunctionValues: Required<Omit<NormaliseFunctionValuesOptions, 'dimension'>>;
    static normaliseFunctionValues: ({ dimension, translateX, translateY, translateZ, }?: NormaliseFunctionValuesOptions) => string;
    static declarations: (values?: NormaliseFunctionValuesOptions) => TranslateDeclarations;
    static legacyDeclarations: () => import("@/css-utilities").TransformDeclarations;
    utilities: () => void;
}
export {};

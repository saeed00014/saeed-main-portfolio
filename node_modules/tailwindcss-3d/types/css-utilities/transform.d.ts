import { type CSSUtility } from '@/css-utilities';
import { Base } from '@/css-utilities/base';
import { type UnsafeCSSValue } from '@/utils/css-value';
import { type Dimension } from '@/utils/dimension';
interface NormaliseFunctionValuesOptions {
    dimension?: Dimension;
    rotateX?: UnsafeCSSValue;
    rotateY?: UnsafeCSSValue;
    skewX?: UnsafeCSSValue;
    skewY?: UnsafeCSSValue;
}
interface NormaliseLegacyFunctionValuesOptions extends NormaliseFunctionValuesOptions {
    translateX?: UnsafeCSSValue;
    translateY?: UnsafeCSSValue;
    translateZ?: UnsafeCSSValue;
    rotateZ?: UnsafeCSSValue;
    scaleX?: UnsafeCSSValue;
    scaleY?: UnsafeCSSValue;
    scaleZ?: UnsafeCSSValue;
    perspective?: UnsafeCSSValue;
}
export interface TransformDeclarations {
    '--webkit-transform': string;
    transform: string;
}
export declare class Transform extends Base implements CSSUtility {
    private isProcessableValue;
    private isProcessableValues;
    private normaliseValues;
    static defaultFunctionValues: Required<Omit<NormaliseFunctionValuesOptions, 'dimension'>>;
    static defaultLegacyFunctionValues: Required<Omit<NormaliseLegacyFunctionValuesOptions, 'dimension'>>;
    static normaliseFunctionValues: ({ dimension, rotateX, rotateY, skewX, skewY, }?: NormaliseFunctionValuesOptions) => string;
    static normaliseLegacyFunctionValues: ({ dimension, translateX, translateY, translateZ, rotateX, rotateY, rotateZ, skewX, skewY, scaleX, scaleY, scaleZ, perspective, }?: NormaliseLegacyFunctionValuesOptions) => string;
    static declarations: (values?: NormaliseFunctionValuesOptions) => TransformDeclarations;
    static legacyDeclarations: (values?: NormaliseLegacyFunctionValuesOptions) => TransformDeclarations;
    utilities: () => void;
}
export {};

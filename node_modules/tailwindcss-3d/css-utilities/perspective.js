"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "Perspective", {
    enumerable: true,
    get: function() {
        return Perspective;
    }
});
var _assert_this_initialized = require("@swc/helpers/_/_assert_this_initialized");
var _class_call_check = require("@swc/helpers/_/_class_call_check");
var _define_property = require("@swc/helpers/_/_define_property");
var _inherits = require("@swc/helpers/_/_inherits");
var _object_spread = require("@swc/helpers/_/_object_spread");
var _create_super = require("@swc/helpers/_/_create_super");
var _base = require("./base");
var _transform = require("./transform");
var _cssvalue = require("../utils/css-value");
var _dimension = require("../utils/dimension");
var Perspective = /*#__PURE__*/ function(Base) {
    "use strict";
    _inherits._(Perspective, Base);
    var _super = _create_super._(Perspective);
    function Perspective() {
        _class_call_check._(this, Perspective);
        var _this;
        _this = _super.apply(this, arguments);
        _define_property._(_assert_this_initialized._(_this), "utilities", function() {
            var cssDeclarations = _this.legacy ? Perspective.legacyDeclarations() : Perspective.declarations();
            _this.api.matchUtilities({
                perspective: function(value) {
                    return _object_spread._({
                        "@defaults transform": {},
                        "--tw-perspective": value
                    }, cssDeclarations);
                }
            }, {
                values: _this.api.theme("perspective"),
                supportsNegativeValues: true
            });
        });
        return _this;
    }
    return Perspective;
}(_base.Base);
_define_property._(Perspective, "defaultTheme", {
    none: "none",
    250: "250px",
    500: "500px",
    750: "750px",
    1000: "1000px"
});
_define_property._(Perspective, "defaultFunctionValues", {
    perspective: "var(--tw-perspective)"
});
_define_property._(Perspective, "normaliseFunctionValues", function() {
    var _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, dimension = _ref.dimension, perspective = _ref.perspective;
    if ((0, _dimension.normaliseDimension)(dimension) === "2d") {
        return "none";
    }
    return (0, _cssvalue.normaliseLengthValue)(perspective, Perspective.defaultFunctionValues.perspective);
});
_define_property._(Perspective, "declarations", function() {
    var values = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    return {
        perspective: Perspective.normaliseFunctionValues(values)
    };
});
_define_property._(Perspective, "legacyDeclarations", function() {
    return _transform.Transform.legacyDeclarations();
});
